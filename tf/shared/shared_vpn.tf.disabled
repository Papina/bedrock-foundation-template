data "aws_ami" "amazonlinux2" {
  owners      = ["amazon"]
  most_recent = true

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-ebs"]
  }
}

resource "aws_security_group" "pritunl-mgmt-sg" {
  count       = var.enable_ec2_vpn == true ? 1 : 0
  name        = "Pritunl Management Group"
  description = "Allow Pritunl connection to Instances"
  vpc_id      = module.modules_vpc.vpc_id

  ingress {
    description = "HTTPS Connection to Instances"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "VPN Connection to Instances"
    from_port   = 1194
    to_port     = 1194
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    description = "Allows egress to all"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = merge(
    {
      Name = "${var.resourcetag}-pritunl-mgmt-sg"
    },
    var.tags
  )
}

resource "aws_eip" "awsip" {
  count            = var.enable_ec2_vpn == true ? 1 : 0
  vpc              = true
  public_ipv4_pool = "amazon"
  instance         = aws_instance.vpn[count.index].id
  tags = merge(
    {
      Name = "${var.resourcetag}-pritunl"
    },
    var.tags
  )
}

resource "aws_network_interface" "vpn" {
  count           = var.enable_ec2_vpn == true ? 1 : 0
  description     = "Pritunl Public IP"
  subnet_id       = module.modules_vpc.public_subnet_ids[0]
  security_groups = [aws_security_group.pritunl-mgmt-sg[count.index].id]
  tags = merge(
    {
      Name = "${var.resourcetag}-pritunl"
    },
  var.common_tags, var.tags)
}

data "aws_iam_policy_document" "instanceassumepolicy" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com", "ssm.amazonaws.com"]
    }
  }
}

data "aws_iam_policy_document" "inline_policy" {
  statement {
    actions = ["ssm:DescribeAssociation",
      "ssm:GetDocument",
      "ssm:ListAssociations",
      "ssm:UpdateAssociationStatus",
    "ssm:UpdateInstanceInformation"]
    resources = ["*"]
  }

  statement {
    actions = ["ec2messages:AcknowledgeMessage",
      "ec2messages:DeleteMessage",
      "ec2messages:FailMessage",
      "ec2messages:GetEndpoint",
      "ec2messages:GetMessages",
    "ec2messages:SendReply"]
    resources = ["*"]
  }

  statement {
    actions   = ["cloudwatch:PutMetricData"]
    resources = ["*"]
  }

  statement {
    actions   = ["ec2:Describe*"]
    resources = ["*"]
  }

  statement {
    actions = ["logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
    "logs:PutLogEvents"]
    resources = ["*"]
  }

  statement {
    actions = ["s3:ListBucket",
    "s3:ListAllMyBuckets"]
    resources = ["*"]
  }

  statement {
    actions = ["s3:PutObject",
      "s3:GetObject",
    "s3:ListObjects"]
    resources = ["*"]
  }
}

resource "aws_iam_role" "role" {
  count = var.enable_ec2_vpn == true ? 1 : 0
  name  = "bedrock-VPN-Role"
  path  = "/"
  managed_policy_arns = ["arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
  "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"]
  assume_role_policy = data.aws_iam_policy_document.instanceassumepolicy.json
  inline_policy {
    name   = "policy-vpn"
    policy = data.aws_iam_policy_document.inline_policy.json
  }
  tags = var.tags
}

resource "aws_iam_instance_profile" "vpn_profile" {
  count = var.enable_ec2_vpn == true ? 1 : 0
  name  = "bedrock-VPN-Profile"
  role  = aws_iam_role.role[count.index].name
}

resource "aws_instance" "vpn" {
  count         = var.enable_ec2_vpn == true ? 1 : 0
  ami           = data.aws_ami.amazonlinux2.id
  instance_type = "t3.small"
  key_name      = "bedrock-shared"
  user_data     = templatefile("userdata/userdata.sh", { unique_prefix = var.unique_prefix })
  network_interface {
    network_interface_id = aws_network_interface.vpn[count.index].id
    device_index         = 0
  }
  iam_instance_profile = aws_iam_instance_profile.vpn_profile[count.index].id
  tags = merge(
    {
      Name = "${var.resourcetag}-pritunl"
    },
    var.tags
  )
}

resource "aws_s3_bucket" "pritunl" {
  count  = var.enable_ec2_vpn == true ? 1 : 0
  bucket = lower("${var.unique_prefix}-pritunl-backups")
  server_side_encryption_configuration {
    rule {
      bucket_key_enabled = true
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }
  tags = merge(
    {
      Name = "${var.resourcetag}-pritunl"
    },
    var.tags
  )
}

resource "aws_s3_bucket_policy" "s3pritunlbackup" {
  count  = var.enable_ec2_vpn == true ? 1 : 0
  bucket = aws_s3_bucket.pritunl[count.index].id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "AllowSSLRequestsOnly"
        Effect    = "Deny"
        Principal = "*"
        Action = [
          "s3:*"
        ]
        Resource = [
          aws_s3_bucket.pritunl[count.index].arn,
          join("/", [aws_s3_bucket.pritunl[count.index].arn, "*"])
        ]
        Condition = {
          Bool = {
            "aws:SecureTransport" = "false"
          }
        }
      }
    ]
  })
}

# Block public access
#--------------------------------------------------------------------------------------------------
resource "aws_s3_bucket_public_access_block" "pritunl" {
  count                   = var.enable_ec2_vpn == true ? 1 : 0
  bucket                  = aws_s3_bucket.pritunl[count.index].id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
  depends_on = [
    aws_s3_bucket_policy.s3pritunlbackup
  ]
}
